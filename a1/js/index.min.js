/*

highlight v4

Highlights arbitrary terms.

<http://johannburkard.de/blog/programming/javascript/highlight-javascript-text-higlighting-jquery-plugin.html>

MIT license.

Johann Burkard
<http://johannburkard.de>
<mailto:jb@eaio.com>

*/

jQuery.fn.highlight = function(pat) {
 function innerHighlight(node, pat) {
  var skip = 0;
  if (node.nodeType == 3) {
   var pos = node.data.toUpperCase().indexOf(pat);
   if (pos >= 0) {
    var spannode = document.createElement('span');
    spannode.className = 'highlight';
    var middlebit = node.splitText(pos);
    var endbit = middlebit.splitText(pat.length);
    var middleclone = middlebit.cloneNode(true);
    spannode.appendChild(middleclone);
    middlebit.parentNode.replaceChild(spannode, middlebit);
    skip = 1;
   }
  }
  else if (node.nodeType == 1 && node.childNodes && !/(script|style)/i.test(node.tagName)) {
   for (var i = 0; i < node.childNodes.length; ++i) {
    i += innerHighlight(node.childNodes[i], pat);
   }
  }
  return skip;
 }
 return this.length && pat && pat.length ? this.each(function() {
  innerHighlight(this, pat.toUpperCase());
 }) : this;
};

jQuery.fn.removeHighlight = function() {
 return this.find("span.highlight").each(function() {
  this.parentNode.firstChild.nodeName;
  with (this.parentNode) {
   replaceChild(this.firstChild, this);
   normalize();
  }
 }).end();
};

/**
 * Created with JetBrains PhpStorm.
 * User: tjmonsi
 * Date: 9/26/13
 * Time: 10:45 AM
 * To change this template use File | Settings | File Templates.
 */

"use strict";

function replaceURLs(string) {
    return string.replace(/[A-Za-z]+:\/\/[A-Za-z0-9-_]+\.[A-Za-z0-9-_:%&~\?\/.=]+/g,
        function(url) {
            return "<a target=\"_blank\" href=\""+url+"\">"+url+"</a>";
            //var a = createElement("a", "", [], {"href": url, "target":"_blank"});
            //a.appendChild(url);
        });
}

// capFirst = capitalize first letter of string
function capFirst(string)
{
    return string.charAt(0).toUpperCase() + string.slice(1);
}

// create a random id string of a specified length
function makeID(length){
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    for( var i=0; i < length; i++ )
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    return text;
}

// santize input as a number input
function toStringNum(num) {
    var possible = "0123456789./ ";
    for (var i in num) {
        var flag = false;
        for (var j in possible) {
            if (num[i]==possible[j]) {
                flag=true;
                break;
            }
        }
        if (!flag) {
            num = num.slice(0,i)+num.slice(i, num.length-1);
        }
    }
    return num;
}

function toFloat(str) {
    var arr = str.split(" ");
    var num = 0;

    for (var k in arr) {
        var x = arr[k];
        if (x.indexOf("/") == -1) {
            num += parseFloat(x);
        } else {
            var arr3 = x.split("/");
            var x2 = parseFloat(arr3[0]);
            for (var i=1; i<arr3.length; i++) {
                x2 = x2/parseFloat(arr3[i]);
            }
            num += x2;
        }

    }
    return num;
}


// create an element and appends it to parent. Must have id
function saveElement(parent, el, id, classes, attributes){
    try {
        var element = createElement(el, id, classes, attributes);
        parent.append(element);
        return $(el+"#"+id);
    } catch(e) {
        console.error(e.stack)
    }
}

// creates an elements and appends it after a sibling. Must have id
function saveElementAfter(before, el, id, classes, attributes) {
    try {
        var element = createElement(el, id, classes, attributes);
        before.after(element);
        return $(el+"#"+id)
    } catch (e) {
        console.error(e.stack)
    }

}

// checks element if within a specified area
function withinArea(x, y, x2, y2, area) {

    if (((x>=x2-area) && (x<=x2+area)) && ((y>=y2-area) && (y<=y2+area))) {
        return true
    } else {
        return false
    }

}

// create a br element
function br(){
    return createElement('br');
}

// create an element
function createElement(el, id, classes, attributes) {
    var element = document.createElement(el);
    // add id
    if (id) element.id = id;
    // add classes
    if (classes) {
        for (var classname in classes) {
            element.classList.add(classes[classname]);
        }
    }
    // add other attributes
    if (attributes) {
        var key;
        for (key in attributes) {
            var value = attributes[key];
            if (key == 'textContent') {
                element.textContent = value;
            }
            else {
                element.setAttribute(key, value);
            }
        }
    }
    return element;
}

/**
 * Created with JetBrains PhpStorm.
 * User: tjmonsi
 * Date: 9/26/13
 * Time: 10:37 AM
 * To change this template use File | Settings | File Templates.
 */

$.cachedScript = function( url, options ) {

    // Allow user to set any option except for dataType, cache, and url
    options = $.extend( options || {}, {
        dataType: "script",
        cache: true,
        url: url
    });

    // Use $.ajax() since it is more flexible than $.getScript
    // Return the jqXHR object so we can chain callbacks
    return $.ajax( options );
};

var dataModel = Class.extend({
    init: function(parent, trialNum, stimuliNum, useAutoComPaste) {
        this.parent = parent;
        this.word_DB = {};
        this.article = [];
        this.sentences = [];
        this.paragraphs = [];
        this.trialNum = trialNum;
        this.stimuliNum = stimuliNum;
        this.acpflag = useAutoComPaste;
        this.run();
        this.vars = null;
        this.windowset = [];
    },

    run: function() {
        this.vars = this.getURLVars();
        var file = "";
        var filename = "";
        var javascript = "";
        //console.log(vars);
        if (this.vars != null) {
            
            filename = "data/data-" + this.trialNum + ".txt";
            console.log('Filename:', filename);
            if (this.vars.jslist!=null) {
                javascript="extrajs/"+this.vars.jslist+".txt"
            } else {
                javascript="extrajs/extrajs.txt"
            }
            var tasklist = "task/tasks-" + this.stimuliNum + ".json"

            if (this.vars.user!=null) {
                this.user = this.vars.user;

            }
            else {
                this.user = "user#";
            }
        }

        //var filelist = $.parseJSON(this.loadFile(filename));
        var filelist = this.loadFile(filename).split("\n");
        var i=0;

        var checked_arr = [];

        if (filelist.length > maxArticles) {
            while (this.article.length<maxArticles) {
                if (i>=filelist.length) {
                    i=0;
                }

                var flag = false;
                if (checked_arr.length==0) {
                    checked_arr.push(i)
                    flag=true;
                } else {
                    for (var j in checked_arr) {
                        if (checked_arr[j]!=i) {
                            checked_arr.push(i);
                            flag=true;
                        }
                    }
                }

                if (flag) {

                    this.processTextFile(this.loadFile(filelist[i]), filelist[i]);


                }

                i++;

            }
        }
        else {
            for (var fileobj in filelist) {
                // RANDOM DATA
                this.processTextFile(this.loadFile(filelist[fileobj]), filelist[fileobj]);

            }
        }

        this.tasks = $.parseJSON(this.loadFile(tasklist)).data;
        //console.log(this.tasks)
        //console.log(this)
        /*if (filelist.data.length > maxArticles) {
            while (this.article.length<maxArticles) {

                if (i>=filelist.data.length) {
                    i=0;
                }

                if (Math.random()>0.7) {
                    var flag = false;
                    if (checked_arr.length==0) {
                        checked_arr.push(i)
                        flag=true;
                    } else {
                        for (var j in checked_arr) {
                            if (checked_arr[j]!=i) {
                                checked_arr.push(i);
                                flag=true;
                            }
                        }
                    }

                    if (flag) {
                        if (filelist.data[i].type=="text") {
                            this.processTextFile(this.loadFile(filelist.data[i].link), filelist.data[i].link);

                        }
                    }

                }
                i++;

            }
        }
        else {
            for (var fileobj in filelist.data) {

                // RANDOM DATA
                if (filelist.data[fileobj].type=="text") {
                    this.processTextFile(this.loadFile(filelist.data[fileobj].link), filelist.data[fileobj].link);
                }

            }
        }*/

        this.extrajs = this.loadFile(javascript);

        //CJS.processScripts();

        //console.log(this);

    },



    processJScript: function() {
        var extrajs = this.extrajs.split("\n");
        for (var js in extrajs) {


            var str = this.loadFile(extrajs[js]);

            var js_el = createElement("script", null, {"type":"text/javascript"});
            js_el.innerHTML = str;

            this.parent.append(js_el);
                //CJS.processExternalScript(extrajs.data[js].link, function(e) {console.log("done")})

                //$.cachedScript(extrajs.data[js].link);
                //jsl.load(extrajs.data[js].link);
                //$.getScript(extrajs.data[js].link, $.proxy(this.processJScript, this));

        }
    },

    processTextFile: function(str, filename) {
        var arr = str.split("\n");

        var articleobj = {};

        articleobj.filename = filename;
        articleobj.paragraphs = [];

        for (var parind in arr) {

            var par = arr[parind];
            if (par.trim()=="") continue;
            var paragraphobj = {};
            paragraphobj.par = par;
            paragraphobj.sentences = [];

            var arrstr = par.split(/[.|!|?]\s/gi);

            for (var s in arrstr) {
                var str = arrstr[s];
                if (str.trim()=="") continue;
                str = par.substring(par.indexOf(str),par.indexOf(str)+str.length+1);
                str = str.trim();
                var sentenceobj = {};
                sentenceobj.sen = str;
                sentenceobj.word = [];
                var arrword = str.split(/\W|_/);

                for (var wi in arrword) {
                    var word = arrword[wi];
                    if (word.trim()=="") continue;
                    word = word.trim();
                    sentenceobj.word.push(word);
                }


                this.sentences.push(sentenceobj);
                var sentenceindex = this.sentences.length-1;
                paragraphobj.sentences.push(sentenceindex);
            }

            this.paragraphs.push(paragraphobj);
            var paragraphindex = this.paragraphs.length-1;
            articleobj.paragraphs.push(paragraphindex);

        }

        this.article.push(articleobj);
        var articleindex = this.article.length-1;

        var art = this.article[articleindex]

        for (var par_index in art.paragraphs) {
            var p_index = art.paragraphs[par_index];
            var p_obj = this.paragraphs[p_index];

            for (var sen_index in p_obj.sentences) {
                var s_index = p_obj.sentences[sen_index];
                var s_obj = this.sentences[s_index];

                for (var word_index in s_obj.word) {
                    var word = s_obj.word[word_index];

                    var wordobj = {};
                    wordobj.id = word.toLowerCase();
                    wordobj.data = {
                        art: articleindex,
                        p: p_index,
                        ap: par_index,
                        s: s_index,
                        ps: sen_index,
                        pos: word_index
                    }
                    //console.log(wordobj);
                    this.w(wordobj);

                }

            }
        }

        //console.log(arr);
    },

    wordIndex: function(val, del) {
        var id = null;
        var obj = null;

        //if (val==null && del==true) return 2;
        // checks if value is an object with id or if it is just an id
        if (val.id!=null) {
            id = val.id;
            obj = val;
        } else {
            id = val;
        }

        // check if id is null... then throw error
        if (id==null) {
            throw new Error("id is needed to do CRD for word INdex")
            return;
        }

        // if del flag is true, delete object
        if (del) {
            //console.log(id);
            //console.log(this.instance_set[id])
            if (this.word_DB[id]!=null) {
                this.word_DB[id]=null;
                return 2
            } else {
                return 3
            }

        }

        // check if id -> obj in instance_set exists;
        if (this.word_DB[id]!=null) {
            if (obj!=null) {
                this.word_DB[id].data.push(obj.data)
            } else {
                return this.word_DB[id];
            }


            // if it doesn't exist (meaning id is free to connect to obj)
            // and val is an object to be saved... then save
        } else if (obj!=null) {
            this.word_DB[id] = {};
            this.word_DB[id].id = id;
            this.word_DB[id].data = [];
            this.word_DB[id].data.push(obj.data);
            return 1

            // if obj doesn't exist
            // then return null
        } else if (obj==null) {
            return null;
        }

    },

    w: function(val, del) {
        return this.wordIndex(val, del);
    },

    searchWord: function(val) {
        var list = [];

        var arr = val.split(/\W|_/);

        //console.log(arr);
        for (var i in arr) {
            var word = arr[i];
            if (word.trim()=="") continue;
            if (i<1) {
                for (var k in this.word_DB) {
                    if (k.indexOf(word)== 0) {
                        var obj = this.word_DB[k].data;
                        for (var x in obj) {
                            list.push(obj[x])
                        }
                        //list.push(this.word_DB[k]);
                    }
                }
                //console.log(list);
            } else {

                //console.log(list);

                var templist = list;
                var newlist = [];

                for (var j=0; j<templist.length; j++) {
                    var obj = templist[j];

                    var senobj = this.sentences[obj.s];
                    var firstword = senobj.word[parseInt(obj.pos)];
                    var firstwordIndex = senobj.sen.indexOf(firstword);

                    var newsentence = senobj.sen.substring(firstwordIndex+firstword.length+1, senobj.sen.length);
                    newsentence = newsentence.toLowerCase();
                    for (var k = 1; k<i; k++) {
                        //console.log(arr[k])
                        newsentence=newsentence.replace(arr[k],"").trim();
                    }
                    //console.log(word);'

                    //console.log(newsentence);
                   // console.log(word);
                   // console.log(newsentence.indexOf(word));


                    if (newsentence.indexOf(word)==0) {
                        newlist.push(obj);
                        //break;
                    }


                }
                list = newlist;
            }
        }
       // console.log(list);

        return list;
    },

    getURLVars: function() {
        var vars = [], hash;
        var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for(var i = 0; i < hashes.length; i++)
        {
            hash = hashes[i].split('=');
            vars.push(hash[0]);
            vars[hash[0]] = hash[1];
        }
        return vars;
    },

    loadFile: function(filename) {
        var oRequest = new XMLHttpRequest();
        var sURL = "http://"+ self.location.hostname + "/faq/requested_file.htm";

        oRequest.open("GET",filename,false);
        oRequest.setRequestHeader("Chrome",navigator.userAgent);
        oRequest.send(null)

        if (oRequest.status==200) {
            var text =  oRequest.responseText;
            //console.log(text);
            return text;
        }
        else alert("Error executing XMLHttpRequest call!");
    }

})

/**
 * Created with JetBrains PhpStorm.
 * User: tjmonsi
 * Date: 9/26/13
 * Time: 10:48 AM
 * To change this template use File | Settings | File Templates.
 */

"use strict";


var buttonClass = Class.extend({
    init: function(parent, label, id, callback, color) {
        this.parent = parent;
        this.label = label;
        this.id = id;
        this.callback = callback;
        this.color = color;

        if (this.color==null) this.color="black";
        this.run();
    },

    run: function() {
        this.element = saveElement(this.parent, "div", this.id, ["button", this.color]);
        this.element.append(this.label);
        this.element.click($.proxy(this.on_click, this));
    },

    on_click: function(e) {
        try {
            this.callback();
        } catch (error) {
            console.error(error.stack);
        }
    },

    update_label: function(new_label) {
        this.label = new_label;
        this.element.empty();
        this.element.append(this.label);
    },

    update_proxy: function(proxy) {
        this.callback = proxy;
    },

    change_function: function(fx) {
        this.update_proxy(fx);
    },

    update_color: function(color) {
        this.element.removeClass(this.color);
        this.color = color;
        this.element.addClass(this.color);
    }
})

var buttonIcon = buttonClass.extend({
    init: function(parent, icon, id, label, callback, color) {
        this.icon = icon;
        this._super(parent, label, id, callback, color);

        //this.run();
    },

    run: function() {
        this.element = saveElement(this.parent, "div", this.id, [this.icon]);
        // this.element.append(this.label);
        this.element.click($.proxy(this.on_click, this));
    },

    update_label: function(new_label) {
        // this._super(new_label);
        // this.element.attr('title', this.label);
    }
})

var windowedElement = Class.extend({
    init: function(parent, windowName, x, y, winnum) {
        this.parent = parent;
        this.x = x;
        this.y = y;
        this.id = windowName;
        this.minimize = true;
        this.winnum = winnum
    },

    run: function() {
        this.window = saveElement(this.parent, "div", this.id+"_window", ['windowClass']);
        this.window.css({"left": this.x, "top": this.y});
        this.window.click($.proxy(this.on_click_window, this));
        //this.window.addClass(this.data.class);

        this.windowHandler = saveElement(this.window, "div", this.id+"_windowHandler", ['windowClassHandler']);
        this.windowHandlerTitle = saveElement(this.windowHandler, "div", this.id+"_windowHandlerTitle", ['windowClassHandlerTitle']);
        this.windowHandlerTitle.append(this.id);

        this.windowHandlerIcons = saveElement(this.windowHandler, "div", this.id+"_windowHandlerIcons", ['windowClassHandlerIcons']);
        this.windowExit = new buttonIcon(this.windowHandlerIcons, 'button-close', this.id+"_windowHandlerExit", "Close", $.proxy(this.closeFromWindow, this));
        this.windowExit = new buttonIcon(this.windowHandlerIcons, 'button-minimize', this.id+"_windowHandlerExit", "Minimize", $.proxy(this.closeFromWindow, this));
        this.windowExit = new buttonIcon(this.windowHandlerIcons, 'button-zoom', this.id+"_windowHandlerExit", "Zoom", $.proxy(this.closeFromWindow, this));
        this.windowExit.element.addClass('windowHandlerExitIcon');


        // add draggable function here
        this.window.draggable(this.scrubber_fx);
        this.windowContent = saveElement(this.window, "div", this.id+"_windowContent", ["windowContent", "pad10"]);

    },

    changewinnum: function(winnum) {
        this.winnum = winnum;
        var zindex = this.winnum*10000
       // console.log(winnum);
        //console.log(zindex)
      //  console.log(this.id);
        this.window.css({"z-index": zindex});
    },

    on_click_window: function() {
        var win = vUI.windows[this.winnum];
      //  console.log(win)
        vUI.windows.splice(this.winnum, 1)
        //console.log(win.id);
        vUI.windows.push(win);
        //vUI.windows.push(win);

        for (var i in vUI.windows) {
            vUI.windows[i].changewinnum(i);
        }


        //$(".windowClass").css({"z-index": "0"});
        //this.window.css({"z-index": "10000"});
    },

    closeFromWindow: function() {
        this.closeWindow();
    },

    closeWindow: function() {
        if (this.minimize) {
            this.minimize = false;
            this.windowContent.addClass("hide");
        } else {
            this.windowContent.removeClass("hide");
            this.minimize = true
        }
        //this.close();
    },

    setxy: function(x,y){
        this.x = x;
        this.y = y;
        this.window.css({"left": this.x, "top": this.y});
    },

    scrubber_fx: {
        containment: 'parent',
        cursor: 'pointer',
        handle: 'div.windowClassHandler',
        start: function() {
            $(".windowClass").css({"z-index": "0"});
            $("#"+this.id).css({"z-index": "10000"})


        },
        drag: function(){
        },
        stop: function() {
        }
    }
});

var windowArticles = windowedElement.extend({
    init:  function(parent, article, x, y, articlenum) {
        this._super(parent, article, x, y);
        this.articlenum = articlenum;
        this.run();
    },

    run: function() {
        this._super();
        this.element = saveElement(this.windowContent, "div", this.id+"_textContent", ["textContent"]);
        var artobj = vD.article[this.articlenum];
        for (var p in artobj.paragraphs) {
            var parindex = artobj.paragraphs[p];
            var parobj = vD.paragraphs[parindex];

            this.element.append("<p>"+parobj.par+"</p>");

        }


    },

    highlightText: function(text) {        
        this.element.highlight(text);
    }
})

var AutoComPaste = windowedElement.extend({
    init:  function(parent, x, y) {
        this._super(parent, "TextEditor", x, y);
        this.focusflag=false;
        this.wordinput = "";
        this.escapeflag = false;
        this.pasteflag = false;
        this.currentPaste = "";
        this.run();
    },

    run: function() {
        this._super();
        this.window.css({"z-index": 10000});
        this.textArea = saveElement(this.windowContent, "textarea", this.id+"_textArea", ["textArea"]);
        this.textArea_el = document.getElementById(this.id+"_textArea");
        this.caretPosNum = 0;
        this.caretWordPos = 0;
        this.pastedVal = "";

        if (vD.acpflag) {
            this.textArea.focus($.proxy(this.focustextarea, this));
            this.textArea.click($.proxy(this.on_click, this));
            this.textArea.blur($.proxy(this.blurtextarea, this));
            this.textArea.keydown($.proxy(this.keydowned, this));
            this.textArea.keypress($.proxy(this.keypressed, this));
        } else {

        }


    },

    on_click: function(e) {
        var num = this.getCaret(document.getElementById(this.id+"_textArea"));

        var wordlength = this.wordinput.length;
        var posdifference = this.caretPosNum - num;

        if (posdifference>=wordlength) {
            this.wordinput = "";
            this.reset();
            this.destroyDropDown();
        } else {
            this.caretWordPos = this.caretWordPos-(posdifference+1);
        }


        //console.log(cPos.left);
        //console.log(cPos.top);
        //console.log(num);
    },

    getCaret: function(el) {
        if (el.selectionStart) {
            return el.selectionStart;
        } else if (document.selection) {
            el.focus();

            var r = document.selection.createRange();
            if (r == null) {
                return 0;
            }

            //console.log(r);

            var re = el.createTextRange(),
                rc = re.duplicate();
            re.moveToBookmark(r.getBookmark());
            rc.setEndPoint('EndToStart', re);

            return rc.text.length;
        }
        return 0;
    },

    keypressed: function(e) {
       // console.log(e.charCode);

        if (this.focusflag) {
            if (String.fromCharCode(e.charCode).match(/\W|_/)) {
                if (String.fromCharCode(e.charCode)!=" ") {
                    this.wordinput == "";
                    this.reset();
                    return;
                }

            }

            if (this.wordinput.trim()=="") {
                this.caretStart = this.getCaret(document.getElementById(this.id+"_textArea"));
                this.caretWordPos = 0;


            }
            this.caretPosNum = this.getCaret(document.getElementById(this.id+"_textArea"));
            this.caretWordPos = this.caretPosNum - this.caretStart;
            this.wordinput = this.wordinput.substring(0, this.caretWordPos)+ String.fromCharCode(e.charCode)+this.wordinput.substring(this.caretWordPos, this.wordinput.length);

            this.searchWord(this.wordinput);

            console.log(this.wordinput)

        }
    },

    keydowned: function(e) {
        if (this.focusflag) {
            // console.log(e.keyCode)
            if (e.keyCode == 8) {

                this.caretPosNum = this.getCaret(document.getElementById(this.id+"_textArea"));
                this.caretWordPos = this.caretPosNum - this.caretStart;

                if (this.caretWordPos<0) {
                    this.caretStart = this.getCaret(document.getElementById(this.id+"_textArea"));
                }

                this.wordinput = this.wordinput.substring(0, this.caretWordPos - 1)+this.wordinput.substring(this.caretWordPos, this.wordinput.length);
                this.searchWord(this.wordinput);

                //left
            } else if (e.keyCode == 37) {
                if (this.pasteflag) {
                    this.removeSentence();

                }

                // right
            } else if (e.keyCode == 39) {
                if (this.pasteflag) {
                    this.addSentence();
                }

                // down
            } else if (e.keyCode == 40) {
                if (this.pasteflag) {
                    this.addParagraph();
                    this.downflag=true;
                } else if (this.dropDown!=null) {
                    this.dropDown[0].selectedIndex=0;
                    this.textAreaVal = this.textArea.val();
                    this.selectedValue();
                    this.dropDown.focus();
                }

                // up
            } else if (e.keyCode == 38) {
                if (this.pasteflag) {
                    this.removeParagraph()
                    this.upflag=true;
                } else if (this.dropDown!=null) {
                    this.dropDown[0].selectedIndex=0;
                    this.textAreaVal = this.textArea.val();
                    this.selectedValue();
                    this.dropDown.focus();
                }

                // escape
            } else if (e.keyCode==27) {
                e.preventDefault();
                if (this.pasteflag) {
                    this.textArea.val(this.textAreaVal);
                    this.pasteflag=false;
                } else {
                    var num = this.getCaret(document.getElementById(this.id+"_textArea"));
                    this.wordinput = this.getWord(num);
                    //this.wordinput="";
                    this.destroyDropDown();
                }

                // [
            } else if (e.keyCode == 219) {
                if (this.pasteflag) {
                    e.preventDefault();

                }
                // ]
            } else if (e.keyCode == 221) {
                if (this.pasteflag) {
                    e.preventDefault();
                    this.addWord();
                }
                // space bar
            } else if (e.keyCode==32) {
                if (this.escapeflag) {
                    this.escapeflag=false;
                    this.wordinput="";
                }
                if (this.pasteflag) {
                    e.preventDefault();
                    this.wordinput="";
                    this.reset();
                    this.pasteflag=false;
                    this.textArea.trigger("acp_paste");
                }

                // enter
            } else if (e.keyCode==13) {
                if (this.pasteflag) {
                    e.preventDefault();
                    this.wordinput="";
                    this.reset();
                    this.pasteflag=false;
                    this.textArea.trigger("acp_paste");
                    //this.
                }
            }

        }

        /// put escape
    },

    reset: function() {
        this.currentOption = null;
        this.startOption = null;
        this.wordinput = "";
        this.currentPaste = "";
    },

    addWord: function() {
        // console.log(this.currentOption);
        if (vD.article[this.currentOption.art].paragraphs.length-1>this.currentOption.parpos) {
            if (vD.paragraphs[this.currentOption.par].sentences.length-1>this.currentOption.senpos) {

                if (vD.sentences[this.currentOption.sen].word.length-1>this.currentOption.pos) {
                    this.currentOption.pos++;
                } else {
                    this.currentOption.senpos++;
                    this.currentOption.sen = vD.paragraphs[this.currentOption.par].sentences[this.currentOption.senpos];
                    this.currentOption.pos = 0;
                }

            }
        }

    },

    deleteWord: function() {

    },

    addSentence: function() {

      //  console.log(this.currentOption);

        if (vD.article[this.currentOption.art].paragraphs.length-1>this.currentOption.parpos)
        {
            if (vD.paragraphs[this.currentOption.par].sentences.length-1>this.currentOption.senpos) {
                this.currentOption.senpos++;
                this.currentOption.sen = vD.paragraphs[this.currentOption.par].sentences[this.currentOption.senpos];
                this.currentOption.pos = vD.sentences[this.currentOption.sen].word.length-1;
            } else {
                this.currentOption.parpos++;
                this.currentOption.par = vD.article[this.currentOption.art].paragraphs[this.currentOption.parpos];
                this.currentOption.senpos = 0;
                this.currentOption.sen = vD.paragraphs[this.currentOption.par].sentences[this.currentOption.senpos];
                this.currentOption.pos = vD.sentences[this.currentOption.sen].word.length-1;
            }

        } else {
            if (vD.paragraphs[this.currentOption.par].sentences.length-1>this.currentOption.senpos) {
                this.currentOption.senpos++;
                this.currentOption.sen = vD.paragraphs[this.currentOption.par].sentences[this.currentOption.senpos];
                this.currentOption.pos = vD.sentences[this.currentOption.sen].word.length-1;
            }
        }

       // console.log(this.currentOption);

        var startparpos = this.startOption.parpos;
        var startsenpos = this.startOption.senpos;
        var endparpos = this.currentOption.parpos;
        var endsenpos = this.currentOption.senpos;
        var text = this.currentPaste;

      //  console.log(startsenpos);

        for (var i = startparpos; i<=endparpos; i++) {
            var par = vD.article[this.startOption.art].paragraphs[i];

            if (startparpos==endparpos) {
                var len = endsenpos
            } else {
                if (i!=endparpos) {
                    var len = vD.paragraphs[par].sentences.length-1;
                } else {
                    var len = endsenpos
                }
            }

            if (i==startparpos) {
                var cursenpos = startsenpos;
            } else {
                var cursenpos = 0;
            }

            for (var j = cursenpos; j<=len; j++ ) {
                if ((j==startsenpos) && (i==startparpos)) continue;
                var sen = vD.paragraphs[par].sentences[j];

                text += vD.sentences[sen].sen+" ";
            }
            text = text.trim()+"\n";
        }

        this.pasteToText(text, this.wordinput);

    },

    removeSentence: function() {
        if (this.startOption.parpos<this.currentOption.parpos)
        {
            if (this.currentOption.senpos>0) {
                this.currentOption.senpos--;
                this.currentOption.sen = vD.paragraphs[this.currentOption.par].sentences[this.currentOption.senpos];
                this.currentOption.pos = vD.sentences[this.currentOption.sen].word.length-1;
            } else {
                this.currentOption.parpos--;
                this.currentOption.par = vD.article[this.currentOption.art].paragraphs[this.currentOption.parpos];
                this.currentOption.senpos = vD.paragraphs[this.currentOption.par].sentences.length-1;
                this.currentOption.sen = vD.paragraphs[this.currentOption.par].sentences[this.currentOption.senpos];
                this.currentOption.pos = vD.sentences[this.currentOption.sen].word.length-1;
            }

        } else {

            if (this.currentOption.senpos>this.startOption.senpos) {
                this.currentOption.senpos--;
                this.currentOption.sen = vD.paragraphs[this.currentOption.par].sentences[this.currentOption.senpos];
                this.currentOption.pos = vD.sentences[this.currentOption.sen].word.length-1;
            }
        }

        var startparpos = this.startOption.parpos;
        var startsenpos = this.startOption.senpos;
        var endparpos = this.currentOption.parpos;
        var endsenpos = this.currentOption.senpos;
        var text = this.currentPaste;


        for (var i = startparpos; i<=endparpos; i++) {
            var par = vD.article[this.startOption.art].paragraphs[i];

            if (startparpos==endparpos) {
                var len = endsenpos
            } else {
                if (i!=endparpos) {
                    var len = vD.paragraphs[par].sentences.length-1;
                } else {
                    var len = endsenpos
                }
            }

            if (i==startparpos) {
                var cursenpos = startsenpos;
            } else {
                var cursenpos = 0;
            }

            for (var j = cursenpos; j<=len; j++ ) {
                if ((j==startsenpos) && (i==startparpos)) continue;
                var sen = vD.paragraphs[par].sentences[j];

                text += vD.sentences[sen].sen+" ";
            }

            text = text.trim()+"\n";
        }

        this.pasteToText(text, this.wordinput);
    },

    addParagraph: function() {

        if (this.upflag) {
            if (vD.article[this.currentOption.art].paragraphs.length-1>this.currentOption.parpos)
            {
                this.currentOption.parpos++;
                this.currentOption.par = vD.article[this.currentOption.art].paragraphs[this.currentOption.parpos]
                this.currentOption.senpos = 0
                this.currentOption.sen = vD.paragraphs[this.currentOption.par].sentences[this.currentOption.senpos];
                this.currentOption.pos = vD.sentences[this.currentOption.sen].word.length-1;
            }
            this.upflag=null;
        }

        if (this.downflag) {

        }
        var startparpos = this.startOption.parpos;
        var endparpos = this.currentOption.parpos;
        var text = ""; //this.currentPaste;
        for (var i= startparpos; i<=endparpos; i++) {
            var par = vD.article[this.startOption.art].paragraphs[i];

            if (i==startparpos) {
                text = this.currentPaste;
                var len = vD.paragraphs[par].sentences.length-1;
                var cursenpos = this.startOption.senpos;

                for (var j = cursenpos; j<=len; j++ ) {
                    if ((j==this.startOption.senpos) && (i==startparpos)) continue;
                    var sen = vD.paragraphs[par].sentences[j];

                    text += vD.sentences[sen].sen+" ";
                }

            } else {
                text += vD.paragraphs[par].par;
            }


        }

        if (vD.article[this.currentOption.art].paragraphs.length-1>this.currentOption.parpos)
        {
            this.currentOption.parpos++;
            this.currentOption.par = vD.article[this.currentOption.art].paragraphs[this.currentOption.parpos]
            this.currentOption.senpos = 0
            this.currentOption.sen = vD.paragraphs[this.currentOption.par].sentences[this.currentOption.senpos];
            this.currentOption.pos = vD.sentences[this.currentOption.sen].word.length-1;
        }

        this.pasteToText(text, this.wordinput);

    },

    removeParagraph: function() {

        if (this.upflag) {

        }

        if (this.downflag) {
            if (this.startOption.parpos<this.currentOption.parpos)
            {
                this.currentOption.parpos--;
                this.currentOption.par = vD.article[this.currentOption.art].paragraphs[this.currentOption.parpos]
                this.currentOption.senpos = vD.paragraphs[this.currentOption.par].sentences.length-1;
                this.currentOption.sen = vD.paragraphs[this.currentOption.par].sentences[this.currentOption.senpos];
                this.currentOption.pos = vD.sentences[this.currentOption.sen].word.length-1;
            }


            this.downflag = null;
        }

        var startparpos = this.startOption.parpos;
        var endparpos = this.currentOption.parpos;
        var text = "";//this.currentPaste;
        for (var i = startparpos; i<=endparpos; i++) {
            var par = vD.article[this.startOption.art].paragraphs[i];
            if (i==startparpos) {
                text = this.currentPaste;
                var len = vD.paragraphs[par].sentences.length-1;
                var cursenpos = this.startOption.senpos;

                for (var j = cursenpos; j<=len; j++ ) {
                    if ((j==this.startOption.senpos) && (i==startparpos)) continue;
                    var sen = vD.paragraphs[par].sentences[j];

                    text += vD.sentences[sen].sen+" ";
                }

            } else {
                text += vD.paragraphs[par].par;
            }
        }

        if (this.startOption.parpos<this.currentOption.parpos)
        {
            this.currentOption.parpos--;
            this.currentOption.par = vD.article[this.currentOption.art].paragraphs[this.currentOption.parpos]
            this.currentOption.senpos = vD.paragraphs[this.currentOption.par].sentences.length-1;
            this.currentOption.sen = vD.paragraphs[this.currentOption.par].sentences[this.currentOption.senpos];
            this.currentOption.pos = vD.sentences[this.currentOption.sen].word.length-1;
        }

        this.pasteToText(text, this.wordinput);
    },

    keydowned_onlist: function(e) {
       // console.log(e.keyCode)

        // backspace
        if (e.keyCode==8) {
            e.preventDefault();
            this.textArea.val(this.textAreaVal);
            this.textArea.focus();
            //this.keydowned(e);

            // escape
        } else if (e.keyCode==27) {
            e.preventDefault();
            this.textArea.val(this.textAreaVal);
            this.textArea.focus();
            var num = this.getCaret(document.getElementById(this.id+"_textArea"));
            this.wordinput = this.getWord(num);

            //this.wordinput="";
            this.destroyDropDown();

            // enter
        } else if (e.keyCode==13) {
            e.preventDefault();
            this.textArea.focus();
            var obj = {};
            obj.art = this.currentOption.art
            obj.parpos = this.currentOption.parpos
            obj.par = this.currentOption.par
            obj.senpos = this.currentOption.senpos
            obj.sen = this.currentOption.sen
            obj.pos = this.currentOption.pos
            this.startOption = obj;
           // console.log(this.currentOption);


            this.destroyDropDown();
            this.pasteflag = true;
        }
    },

    getWord: function(num) {
        var word = "";
        var textarea = this.textArea.val();
        num--;
        var startnum = num;
       // console.log(textarea.charAt(num));
        word = textarea.charAt(num);
        //get previous

        while (!(""+textarea.charAt(num-1)).match(/\W|_/)){
       //     console.log(num);
            word = textarea.charAt(num-1)+word;
            num--;
            if (num==0) break;
        }
        this.caretStart = num;
        //console.log(word);

        num = startnum;

        while (!(""+textarea.charAt(num+1)).match(/\W|_/)){
            word = word+textarea.charAt(num+1);
            num++;
            if (num>=textarea.length) break;
        }

        this.escapeflag = true;

        //console.log(word)
        return word;
        // get forward

    },

    searchWord: function(word) {
        if (word.length<1) {
            this.destroyDropDown();
            return;
        }

        word = word.toLowerCase();

        var list = vD.searchWord(word);
        var sentencelist = [];

        //console.log(list);
        for (var i in list) {
            var data = list[i]
            var pos = data.pos;
            var sen = data.s;
            var par = data.p;
            var art = data.art;
            var ap = data.ap;
            var ps = data.ps;

            var sentence = "";
            var senobj = vD.sentences[sen];

            var firstword = senobj.word[parseInt(pos)];

            var firstwordIndex = senobj.sen.indexOf(firstword);

            sentence = senobj.sen.substring(firstwordIndex, senobj.sen.length);

            var sentencelistobj = {};
            sentencelistobj.sentence = sentence;
            sentencelistobj.sen = sen;
            sentencelistobj.par = par;
            sentencelistobj.art = art;
            sentencelistobj.pos = pos;
            sentencelistobj.ap = ap;
            sentencelistobj.ps = ps;

            sentencelist.push(sentencelistobj)

        }

        //console.log(sentencelist);
        this.createDropDown(sentencelist);
    },

    createDropDown: function(list) {
        if (list.length<=0) {
            this.destroyDropDown();
            return;
        }

        if (this.dropDown==null) {
            this.dropDown = saveElement(this.windowContent, "select", this.id+"_dropDown", ["ACPDropDown"], {"size": 10});
            this.dropDown.change($.proxy(this.selectedValue, this));
            this.dropDown.keydown($.proxy(this.keydowned_onlist, this));
        }

        this.dropDown.empty();

        var cPos = Measurement.caretPos(this.textArea_el);
        var offset = this.textArea.offset();

        var caretX = cPos.left-offset.left;
        var caretY = cPos.top-offset.top;

        this.dropDown.css({"left": caretX, "top": caretY+24});
        //console.log(list);
        for (var i in list) {
            var obj = list[i];
            var sen = obj.sentence;
            var s = obj.sen;
            var p = obj.par;
            var art = obj.art;
            var pos = obj.pos;
            var ap = obj.ap;
            var ps = obj.ps;

            var optionval = art+":"+ap+":"+p+":"+ps+":"+s+":"+pos;
            var option = "<option value=\""+optionval+"\">"+sen+"</option>";
            this.dropDown.append(option);
        }
    },

    destroyDropDown: function() {
        if (this.dropDown!=null) {
            //this.currentOption=null;
            //this.currentPaste ="";
            this.dropDown.empty();
            this.dropDown.remove();
            this.dropDown = null;
        }
    },

    selectedValue: function() {
        var option = this.dropDown.find(":selected");
        var text = option.text();

        var arr = option.val().split(":");

        var obj = {}
        obj.art = arr[0]
        obj.parpos = arr[1]
        obj.par = arr[2]
        obj.senpos = arr[3]
        obj.sen = arr[4]
        obj.pos = arr[5]

        this.currentOption = obj;
        this.currentPaste = text;
        this.pasteToText(text, this.wordinput);
        //console.log(option.val())
    },

    pasteToText: function(text, wordplacement) {
        this.pastedVal = text;
        var textval = this.textAreaVal;
        var textindex = this.caretStart
        textval = textval.substring(0, textindex)+text+textval.substring(textindex+wordplacement.length, textval.length);
        this.textArea.val(textval);
    },

    focustextarea: function() {
        this.focusflag=true;
        //this.window.css({"z-index": "10000"});
        this.caretPosNum = this.getCaret(document.getElementById(this.id+"_textArea"));

    },

    blurtextarea: function() {
        this.focusflag=false;
        //this.wordinput = "";
        this.caretPosNum = 0;
        //this.destroyDropDown();
    }
})

/**
 * Created with JetBrains PhpStorm.
 * User: tjmonsi
 * Date: 9/26/13
 * Time: 10:42 AM
 * To change this template use File | Settings | File Templates.
 */

"use strict";

var viewerUI = Class.extend({
    init: function(parent) {
        this.parent = parent;
        this.windows = [];
        this.windows_order = [];
        this.run();
    },

    run: function() {
        var txteditor = new AutoComPaste(this.parent, 20, 20);
        this.txteditor=txteditor;
        this.windows.push(txteditor);
        this.windows[this.windows.length-1].changewinnum(this.windows.length-1)
        var win_width = $(document).width();
        var win_height = $(document).height();

        // this.parent.css({"height": $(document).height()-200})

        for (var art in vD.article) {
            var artobj = vD.article[art];
            var filename = artobj.filename;
            var arrfile=filename.split(/\W|_/);
            var name = "";

            for (var n in arrfile) {
                name += arrfile[n]+"_"
            }

            name += "window";

            var posx = Math.random()*(win_width-500);
            var posy = Math.random()*(win_height-400);

            this.windows.push(new windowArticles(this.parent, name, posx, posy, art));
            this.windows[this.windows.length-1].changewinnum(this.windows.length-1)
        }

        this.taskset = vD.tasks;

        for (var j in this.windows) {
            this.windows_order.push(this.windows[j].id);
        }

    },

    reset_order: function() {
        for (var i=this.windows_order.length-1; i>=0; i--) {
            for (var j=0; j<this.windows.length; j++) {
                if (this.windows[j].id==this.windows_order[i]) {
                    this.windows[j].on_click_window();
                    break;
                }
            }
        }
    }

});

var ResultObject = Class.extend({
    init: function(callback) {
        this.changeGenerator(callback);
    },

    changeGenerator: function(callback) {
        this.callback = callback;
    },

    run: function() {
        this.callback();
    }
})

var log = function(data) {
    var timestamp = new Date();
    logdata.push({data:data, timestamp: timestamp});
}

var logdata = [];

var defaultGenerateResult = function() {

    //document.location = 'data:text/csv,' +
    //    encodeURIComponent(data);
}

var checkNextTask = function () {
    tasknum++;
    //console.log(tasknum);
    if (tasknum >= vUI.taskset.length) {

        if (tasknum >= vUI.taskset.length+1) {
            window.location.href = "page4.php";
        }

        console.log(logdata);
        global.data = JSON.stringify({"data":logdata}, null, " ");
        generateResult.run();

        if (vD.acpflag) {
            var interface1 = "acp";
        } else {
            var interface1 = "xwindow"
        }
    } else  {

        var obj=vUI.taskset[tasknum];
        $("#TaskNameExperiment").empty();
        $("#TaskNameExperiment").append(obj.title);
        var word = "";

        for (var i in obj.var) {
            word += obj.var[i]+", ";
        }

        word = word.trim();

        $("#ConditionNameExperiment").empty();
        $("#ConditionNameExperiment").append(word);

        $("#TrialNumber").empty();
        $("#TrialNumber").append((tasknum+1)+"/"+vUI.taskset.length);

        $("#InstructionText").empty();
        $("#InstructionText").append('<hr><div class="well" id="stimuli" style="font-size: 16px;">' + obj.Stimuli + '</div>');

        global.taskstart = new Date();
        global.taskobject = obj;

        $(document).trigger("next_task");
    }
}

var resetTextArea = function() {
    vUI.txteditor.textArea.val("");
    vUI.txteditor.reset();
    vUI.txteditor.pasteflag = false;
    vUI.txteditor.escapeflag = false;
}

var resetZ_order = function() {
    vUI.reset_order();
    $(document).trigger("reset_order");
}

var getCurrentStimuli = function() {
    return vUI.taskset[tasknum].Stimuli;
}

var highlightText = function(text) {
    for (var i in vUI.windows) {
        if (vUI.windows[i].highlightText) {
            vUI.windows[i].highlightText(text);    
        }        
    }
}

var removeHighlightText = function() {
    $('body').removeHighlight();
}

var taskObj = function() {
    if (vD!=null) {
        if (vD.tasks!=null) {
            return vD.tasks    
        }    
    } 
    return null;
}

"use strict";

var vD = null;
var vUI = null;
var InstructionArea = null;
var TaskButton = null;
var maxArticles = 6;
var global = {};
var tasknum = -1;

// Things that users can modify
var generateResult = new ResultObject(defaultGenerateResult);
global.taskstart = null;
global.taskobject = null;

var runTrial = function(trialNum, stimuliNum, useAutoComPaste){
    console.log('runTrial', trialNum, stimuliNum, useAutoComPaste);
    $('#InstructionButtonArea').html('');
    $('#Root').html('');

    vD = null;
    vUI = null;
    InstructionArea = null;
    TaskButton = null;
    maxArticles = 6;
    global = {};
    tasknum = -1;

    // Things that users can modify
    generateResult = new ResultObject(defaultGenerateResult);
    global.taskstart = null;
    global.taskobject = null;

    var root = $("#Root");

    vD = new dataModel(root, trialNum, stimuliNum, useAutoComPaste);
    vUI = new viewerUI(root);

    checkNextTask();
    InstructionArea = $('#InstructionArea');

    TaskButton = new buttonClass($('#InstructionButtonArea'), "Next Task", 'generateResultButton', checkNextTask)

    vD.processJScript();
    $(document).trigger("next_task");
}
